---
- name: Enable plugins
  ansible.builtin.command:
    cmd: "microk8s.enable {{ microk8s_plugin.key }}"
  with_dict: "{{ microk8s_plugins }}"
  loop_control:
    loop_var: microk8s_plugin
    label: "{{ microk8s_plugin.key }}"
  when:
    - is_master is defined and ( is_master | bool)
    - microk8s_plugins is defined
    - microk8s_plugin.value
    - microk8s_plugin.key != "registry"
    - microk8s_plugin.key != "dns"
    - microk8s_plugin.key != "host-access"
  register: microk8s_cmd_result
  changed_when:
    - "microk8s_plugin.key ~ ' is already enabled'
      not in microk8s_cmd_result.stdout"
  tags:
    - molecule-idempotence-notest
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.enable

- name: Disable plugins
  ansible.builtin.command:
    cmd: "microk8s.disable {{ microk8s_plugin.key }}"
  with_dict: "{{ microk8s_plugins | default({}) }}"
  loop_control:
    loop_var: microk8s_plugin
    label: "{{ microk8s_plugin.key }}"
  register: microk8s_cmd_result
  changed_when:
    - "microk8s_plugin.key ~ ' is already disabled'
      not in microk8s_cmd_result.stdout"
  when:
    - is_master is defined and ( is_master | bool)
    - microk8s_plugins is defined
    - not (microk8s_plugin.value | bool)
    - microk8s_plugin.key != "registry"
    - microk8s_plugin.key != "host-access"
  tags:
    - molecule-idempotence-notest
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.disable

- name: Enable registry
  ansible.builtin.command:
    cmd: "microk8s.enable registry:size={{ microk8s_registry_size }}"
  register: microk8s_cmd_result
  changed_when:
    - "'registry is already enabled' not in microk8s_cmd_result.stdout"
  when:
    - is_master is defined and ( is_master | bool)
    - microk8s_plugins is defined
    - microk8s_plugins.registry is defined
    - (microk8s_plugins.registry | bool)
  tags:
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.enable
    - microk8s.plugins.enable.registry

- name: Disable registry
  ansible.builtin.command:
    cmd: "microk8s.disable registry:size={{ microk8s_registry_size }}"
  register: microk8s_cmd_result
  changed_when:
    - "'registry is already disabled' not in microk8s_cmd_result.stdout"
  when:
    - is_master is defined and ( is_master | bool)
    - microk8s_plugins is defined
    - microk8s_plugins.registry is defined
    - not (microk8s_plugins.registry | bool)
  tags:
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.disable
    - microk8s.plugins.disable.registry

- name: Enable DNS
  ansible.builtin.command:
    cmd: 'microk8s.enable dns:{{ microk8s_dns_servers | join(",") }}'
  register: microk8s_cmd_result
  changed_when:
    - "'dns is already enabled' not in microk8s_cmd_result.stdout"
  when:
    - is_master is defined and ( is_master | bool)
    - microk8s_plugins is defined
    - microk8s_plugins.dns is defined
    - (microk8s_plugins.dns | bool)
  tags:
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.enable
    - microk8s.plugins.enable.dns

- name: Enable host-access
  ansible.builtin.command:
    cmd: "microk8s.enable host-access:ip={{ microk8s_host_access_ip }}"
  register: microk8s_cmd_result
  until: microk8s_cmd_result is not failed
  # Running the command twice because it might fail with exit code 2 on the first try
  retries: 1
  changed_when:
    - "'host-access is already enabled' not in microk8s_cmd_result.stdout"
  when:
    - microk8s_plugins is defined
    - "'host-access' in microk8s_plugins"
    - (microk8s_plugins["host-access"] | bool)
  tags:
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.enable
    - microk8s.plugins.enable.host_access

- name: Disable host-access
  ansible.builtin.command:
    cmd: "microk8s.disable host-access:ip={{ microk8s_host_access_ip }}"
  register: microk8s_cmd_result
  changed_when:
    - "'host-access is already disabled' not in microk8s_cmd_result.stdout"
  when:
    - microk8s_plugins is defined
    - "'host-access' in microk8s_plugins"
    - not (microk8s_plugins["host-access"] | bool)
  tags:
    - microk8s
    - microk8s.plugins
    - microk8s.plugins.disable
    - microk8s.plugins.disable.host_access

- name: Create Directory for trusted registries
  ansible.builtin.file:
    path: /var/snap/microk8s/current/args/certs.d/{{ item.endpoint | regex_replace('https?:\/\/','') }}
    state: directory
  with_items: "{{ microk8s_trusted_registries | default([]) }}"

- name: Populate Trusted Registries
  ansible.builtin.template:
    src: hosts.toml.j2
    dest: /var/snap/microk8s/current/args/certs.d/{{ item.endpoint | regex_replace('https?:\/\/','') }}/hosts.toml
  with_items: "{{ microk8s_trusted_registries | default([]) }}"
...
